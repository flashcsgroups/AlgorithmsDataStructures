* Связный список - динамическая структура данных, содержащая узлы и связи между ними. 
-- Узел должен содержать данные и указатели на другие элементы.
-- Односвязный список содержит только указатель на следующий элемент. Последний указывает на null, что означает конец. Но можно зациклить на любой другой элемент.
-- Двусвязный указывает на следующий и предыдущий. Можно зациклить только на первый элемент.
-- В памяти элементы могут располагаться как угодно, а не последовательно, как в списке (эквивалентно объявлению в памяти располагаются динамические массивы).

* Стек - АТД (или структура данных) - список элементов, организованных по принципу "Последний пришел - первый вышел".
-- 2 операции: вставка (PUSH) и извлечение (POP).
-- Вставка - элемент добавляется в начало, извлечение также из начала.
-- можно реализовать в виде массива или списка.
-- list ={6, 5, 4, 3, 2, 1}. Добавление в начало. Push(n) = Set(list[0]), Pop() = Get(list[0]).
-- нужно хранить данные, указатель (ссылку) на голову стека.  

* Очередь - АТД (или структура данных) - список элементов, организованных по принципу "Первый пришел - первый вышел".
-- Также 2 операции вставки и извлечения. Можно реализовать в виде массива или списка (односвязного).
-- Вставка - новый элемент добавлятся в начало, извлечение из конца.
-- list ={5, 4, 3, 2, 1}. Добавление в начало. Push(n) = Set(list[0]), Pop() = Get(list[last]).
-- нужно хранить данные, указатели (ссылки) на голову и хвост стека.

* Дэк - АТД (или структура данных) - список элементов, которые можно добавлять как в начало, так и в конец. Двусвязная очередь.
-- 4 операции: вставка в начало и конец, аналонично извлечение. Можно реализовать в виде массива или списка (двусвязного).

* Двоичная куча (пирамида, сортирующее дерево) - структура элементов в виде почти полного двоичного дерева. Должны быть соблюдены:
1. Значения в вершинах должны быть больше, чем значения потомков.
2. Глубина (расстояние до корня) листьев (вершины не имеющие потомков) должны различаться не более чем на 1 слой.
3. Последний слой заполняется слева направо.
4. Глубина ДК O(log(n)), где n - число элементов.

>> можно хранить в массиве A[].
-- Если индексация в A начинается с 1, то: 
A[1] - корень дерева.
A[2i], A[2i+1] - потомки A[i].
A[i/2] - предок A[i].

-- Если индексация в A начинается с 0, то:
A[0] - корень дерева.
A[2i+1], A[2i+2] - потомки A[i].
A[(i-1)/2] - предок A[i].

-- Если в куче меняется элемент, то может сломаться упорядоченность.
1. Восстановить свойства кучи можно через 2 функции: Sift Up и Sift Down.
2. В первом случае дочерний элемент можно поднять выше родительского, во втором опустить.
3. С реализацией данных методов, фактически, получается самовыравниваюшееся дерево.

-- Если в неупорядоченном массиве для всех элентов, начиная с последнего, выполнить Sift Down, то получим кучу за O(n).
-- Время работы Sift Up O(log(n)).

* Очередь с приоритетом (АТД), список элементов (очередь), поддерживающий:
1. Добавление элемента с приоритетом.
2. Извлечение элемента с наивысшим приоритетом.
3. Просмотр без извлечения с наивысшим приоритетом.

-- может быть реализован через двоичную кучу, через массив нельзя.