По лекциям Технострима:
Лекция 1.

-- Сложность алгоритмов бывает:
 1. Вычислительная.
 2. Описательная.
 3. С выделением памяти.

-- Для алгоритмов чаще всего оценивается вычислительная сложность через О-нотацию.
   Есть тэта-нотация - функция сложности ограничена сверху и снизу.
   Есть О-нотация (большая и малая о), только сверху, чаще всего берется для оценки алгоритмов.

-- Есть теорема об оценке асимптотической сложности алгоритма. Можно закодить и проверить.

-- Алгоритмы можно разделить на линейные, условные и циклические.

-- Алгоритмы, которые нельзя решить быстро называется NP-задачи. Т.е, это недетерменированные задачи. Рассмотрены примеры таких задач (о рюкзаке, коммивояжера, рекурсии и т.п.). Такие задачи являются задачами тысячелетия и не решаются для больших N.

-- Эффективно задачи можно решить методами динамического программирования.

-- Алгоритм должен обладать рядом свойств: детерминированность, результативность и т.п.

-- Теорема о рекурсии. Надо попробовать закодить.

-- Ввведены понятия предиката и инварианта (предикат какое-то утверждение, инвариант - постоянное верное утверждение, часто применяют для доказательства корректности циклов).

-- Рекурсия красивое решение задачи, но неэффективное. Нужно заменять на более быстрые и простые операции (циклы, умножение и т.п., т.е. на более простые операции).

-- Введено понятие абстракции. Особенно важно для описания и использования структур, методов и манипулирования данными.

-- Рассмотрена задача чисел фиббоначи. Легко решается в лоб, но не эффективно при возрастании N.

Лекция 2.

* Задачи нахождения оптимального решения задач (комивояжера, дорожное движение-светафоры, о рюкзаке. 
 -- это все экстремальные задачи (max/min).
 
* Жадные алгоритмы.
 -- состоят из итераций.
 -- принимают решение на каждом шаге, стараясь найти локально оптимальное решение, чтобы упростить задачу.
>> Пример жадного алгоритма - градиентный спуск, как вариант - можно рекурсию подсчитать через этот метод, на кажлой итерации запоминая значения функции от N, записывая данные в стек, и потом собрать ответ в обратном порядке.
-- Нихера не понятно по деталям и реализации.
 
-- Введено понятия префиксного кода (не начинается с других кодов).
 
 >> Алгорит Хаффмана- сжатие информации(имеет отношение к жадному)
-- Нихера не понятно. Сухая теория оторванная от практики разработки. 

>> Задача о покрытии строки.
Кроме как последовательно с начала искать подстроку, если нашли, передвинули указатель и ищем дальше подстроки в уменьшенной строке, остальное нихера не понятно.

-- Введено понятие префиксного дерева. Пока что нихера не ясно.

Лекция 3. Сортировки.

>> Понятия сортировки, устойчивости сортировки. Задача сортировки.

-- Сортировка сравнением. Требуется определить операцию сравнения.
-- Простые: сортировка пузырьком (на основе сравнения), вставками, выбором, Шелла (на базе пузырька или выбора), Шейкерная (на базе пузырька).

-- Более сложные: нахождение медианы, нахождение k-й статистики, сортировка слиянием, быстрая сортировка, сортировка с использованием свойств элементов (сортировка подсчетом).













